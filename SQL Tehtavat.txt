06.11.2018

Työskentely Company-tietokannan kanssa. Jos olet tehnyt tämän jo tunnilla, niin voit siirtyä suoraan tekemään tehtäviä.

1. Avaa tuubista tiedosto "Company DB and Data MariaDB.txt"
2. Avaa selaimesta linkki: users.metropolia.fi/phpMyAdmin
3. Valitse kaikki avaamastasi tekstitiedostosta ja kopioi se leikepöydälle
4. Sijoita tekstisi tietokantaan (SQL-lomake + Sijoita + Suorita)

===

Esimerkit:
1. Valitse kaikki esimiehet (supervisors)

SELECT
 s.lname Supervisor
FROM
 employee e,
 employee s
WHERE
 e.supervisor = s.ssn;

Esittääksesi esimiehet vain kerran, käytä määritettä DISTINCT:

SELECT DISTINCT
 s.lname Supervisor
FROM
 employee e,
 employee s
WHERE
 e.supervisor = s.ssn;

======

Tehtävät:

===

1. Valitse kaikki osastot

SELECT * FROM department d;

===

2. Valitse työntekijät ja esitä niistä etunimi ja sukunimi

SELECT
 e.lname,
 e.fname 
FROM 
 employee e;

===

3. Valitse kaikkien työntekijöiden nimet ja osastot, joilla he työskentelevät

SELECT
 d.dname Osasto,
 e.lname Työntekijä,
 e.fname

FROM
 employee e,
 department d

WHERE
 e.deptno = d.dno;

===

4. Valitse kaikkien päälliköiden (manager) nimet ja osastot, joilla he työskentelevät

SELECT
 d.dname,
 e.fname,
 e.lname

FROM
 employee e,
 department d

WHERE
 e.ssn = d.manager;

===

5. Laske kunkin osaston työntekijöiden lukumäärä

SELECT
 d.dname Osasto,
 COUNT(e.ssn) 'Työntekijöiden lkm'

FROM
 employee e INNER JOIN
  department d ON e.deptno = d.dno

GROUP BY
 d.dname;

===

6. Valitse kaikki projektit, jotka ohjataan Hankinta (Purchase)-osastolla

SELECT
 d.dname,
 p.pname
FROM
 department d,
 project p
WHERE
 d.dno = '10' AND d.dno =  p.deptno;
 

===

7. Valitse kaikki esimiehet (supervisor) osastoittain (???)

SELECT
 d.dname,
 e.fname,
 e.lname

FROM
 employee e,
 department d

WHERE
 e.ssn = d.manager
 
ORDER BY
 d.dname;

===

8. Valitse kaikki Tampereella olevat projektit ja lajittele ne ohjaavan osaston mukaan

SELECT DISTINCT
 p.pname,
 d.dname

FROM
 project p,
 department d

WHERE
 p.location = '2' AND d.dno = p.deptno;


===

9. Laske yhteenlasketut tunnit projekteittain

//Toimii:
SELECT
 pname,
SUM(hours)
FROM
 works_on w,
 project p
WHERE
 p.pno = w.ProjNo
GROUP BY
 projno;


=====

SELECT
 works_on,
 projno,
SUM(hours)
FROM
 works_on,
 project
GROUP BY
 projno = pno;
 

--

SELECT 
 w.hours,
 p.pname

FROM
 works_on w,
 project p
WHERE
 w.projno = p.pno;


10. Laske yksikköhinta: työtunnit / projekti osastoittain

//osasto, projnimi, tunnit sum:
SELECT
 d.dname,
 p.pname,
SUM(hours)
FROM
 works_on w,
 project p,
 department d
WHERE
 p.pno = w.ProjNo AND p.DeptNo = d.DNo
GROUP BY
 projno;

    
===

11. Valitse työntekijöt osastoittain ja esitä ne  ikäjärjestyksessä

//Antaa ikäjärjestyksessä ja näyttää missä osastossa on
SELECT
 e.FName,
 e.lname,
 d.dname
FROM
 employee e,
 department d
WHERE
 e.DeptNo = d.DNo
GROUP BY
 bdate DESC;

---

SELECT
 e.FName,
 e.lname,
 d.dname
FROM
 employee e,
 department d
WHERE
 e.DeptNo = d.DNo
ORDER BY
 d.dname AND bdate DESC;


===

12. Laske kaksosten tekemät työtunnit projekteittain

//Lisätään kaksonen (vain) employee taulukkoon
INSERT INTO employee(Ssn, Bdate, FName, Minit, LName, Sex, Salary, Address, DeptNo, Supervisor)
VALUES (86349996-757, "1980-01-01", "Lewis", "K", "Simpson", "m", 23000.00, "Fluteroad 32", 10, 4661051-830);

SELECT DISTINCT
 w.hours,
 e.LName
FROM
 employee e,
 works_on w
WHERE
 e.LName LIKE "Simpson";


---
//Antaa Simpsonin työtunnit projkteittain
SELECT DISTINCT
 w.hours,
 e.LName,
 p.PName,
SUM(hours)
FROM
 employee e,
 works_on w,
 project p
WHERE
 e.LName LIKE "Simpson" AND p.PNo = w.ProjNo AND w.Employee = e.Ssn
GROUP BY
 w.Hours;

 
----

SELECT
 works_on.Hours,
 employee.LName
FROM
 employee,
 works_on
INNER JOIN
 project ON project.PNo = works_on.ProjNo
WHERE
 employee.LName LIKE "Simpson" OR employee.LName = "Levin" AND works_on.Employee = employee.Ssn
ORDER BY
 employee.LName;

---

//Turhaa
SELECT
 works_on.Hours,
 employee.LName
FROM
 employee,
 works_on
INNER JOIN
 project ON project.PNo = works_on.ProjNo
INNER JOIN
 works_on ON works_on.Employee = employee.Ssn
WHERE
 employee.LName LIKE "Simpson" OR employee.LName = "Levin"
ORDER BY
 employee.LName;

===

13. Valitse vanhin esimies 

SELECT
 e.fname,
 s.lname
FROM
 employee e,
 employee s
WHERE
  e.supervisor = s.ssn
ORDER BY
 e.Bdate
LIMIT
 1;


===

14. Valitse kaikki riippuvuussuhteessa olevat (dependents) ja ne, joilla on sisar (Vinkki: käytä OUTER JOIN:ia)


//Kaikki
SELECT
 e.FName,
 e.LName,
 d.DName,
 d.Relationship
FROM
 employee e,
 dependent d
FULL OUTER JOIN
 d ON  e.Ssn = d.Employee
ORDER BY
 e.LName;

---

//Vain sisarukset
SELECT
 employee.FName,
 employee.LName,
 dependent.Relationship,
 dependent.DName
FROM
 dependent
INNER JOIN
 employee ON dependent.Employee = employee.Ssn
WHERE
 dependent.Relationship = "Sister" or dependent.Relationship = "Brother"
ORDER BY
 dependent.Relationship;
